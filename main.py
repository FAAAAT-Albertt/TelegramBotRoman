import asyncio
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from text import TRADE_CONDITIONS, TRADE_PAY, CALLBACK_MESSAGE, TRADE_INFO
from config import TOKEN, CONTACT_ID, DEV_ID
import requests
from bs4 import BeautifulSoup

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


button1 = KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Trade with China")
button2 = KeyboardButton("–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã —Å Trade with China")
button3 = KeyboardButton("–ë–ª–∞–Ω–∫ –∑–∞–∫–∞–∑–∞ –≤ Trade with China")
button4 = KeyboardButton("–ì—Ä—É–ø–ø–∞ Trade with China VK")
button5 = KeyboardButton("–£–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å")
button6 = KeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Trade with China")
but_admin = KeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—Å")
markup3 = ReplyKeyboardMarkup(resize_keyboard=True).add(button1).add(button2).add(button3).add(button4).add(button5).add(button6)
markup_admin = ReplyKeyboardMarkup(resize_keyboard=True).add(button1).add(button2).add(button3).add(button4).add(button5).add(button6).add(but_admin)

ib1 = InlineKeyboardButton(text='Excel —Ñ–æ—Ä–º–∞', callback_data="xlsx")
ib2 = InlineKeyboardButton(text='Text —Ñ–æ—Ä–º–∞', callback_data="blank")
ib3 = InlineKeyboardButton(text="VK", url="https://vk.com/tradewithchinaru")
ikb = InlineKeyboardMarkup(row_width=2).add(ib1, ib2)
ikb2 = InlineKeyboardMarkup(row_width=2).add(ib3)

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if str(message.from_user.id) == CONTACT_ID:
        await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Goody -> –ù–µ —Ö—É–ª–∏–≥–∞–Ω—å —Ç—É—Ç —Å–∏–ª—å–Ω–æ!", reply_markup=markup_admin)
    else:
        await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trade with China, –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä —Å –ö–∏—Ç–∞–µ–º üá∑üá∫üá®üá≥", reply_markup=markup3)
    await message.delete()

@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Trade with China')
async def trade_info(message: types.Message):
    await message.answer(text=TRADE_INFO)

@dp.message_handler(text='–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã —Å Trade with China')
async def trade_cond(message: types.Message):
    await message.answer(text=TRADE_CONDITIONS)

@dp.message_handler(text='–ë–ª–∞–Ω–∫ –∑–∞–∫–∞–∑–∞ –≤ Trade with China')
async def trade_blank(message: types.Message):
    await message.answer(text=TRADE_PAY, reply_markup=ikb)

@dp.message_handler(text='–ì—Ä—É–ø–ø–∞ Trade with China VK')
async def trade_vk(message: types.Message):
    await message.answer(text="Trade with China –í–∫–æ–Ω—Ç–∞–∫—Ç–µ ‚¨áÔ∏è", reply_markup=ikb2)
@dp.message_handler(text='–£–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å')
async def trade_price(message: types.Message):
    await message.answer(text=f"–ê–∫—Ç—É–ª—å–Ω—ã–π –∫—É—Ä—Å CNY/RUB -> {get_data()}")
    await message.delete()

@dp.message_handler(text='–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Trade with China')
async def trade_goody(message: types.Message):
    await message.answer(text="–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Trade with China.")
    await message.delete()
    username = message.from_user.username
    await bot.send_message(chat_id=CONTACT_ID, text=f"@{username} <- –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")


@dp.message_handler()
async def admin_panel(message: types.Message):
    if message.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—Å":
        await message.answer(text="–ù–∞–∑–Ω–∞—á—å –∫—É—Ä—Å...")
    else:
        price = message.text
        #
        if (str(message.from_user.id) == CONTACT_ID) and ('0' in price or '1' in price or '2' in price or '3' in price or '4' in price or '5' in price or '6' in price or '7' in price or '8' in price or '9' in price or '.' in price) and (len(price) <= 5):
            with open('price.txt', "w+", encoding='utf-8') as file:
                file.write(price)


@dp.callback_query_handler()
async def callback_button(callback: types.CallbackQuery):
    if callback.data == "blank":
        return await callback.message.answer(text=CALLBACK_MESSAGE)
    elif callback.data == "xlsx":
        return await callback.message.answer_document(open('Blank_zakaza_TWC.xlsx', 'rb'))

def get_data():
    with open('price.txt', "r", encoding='utf-8') as file:
        price = file.read()

    return price

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
